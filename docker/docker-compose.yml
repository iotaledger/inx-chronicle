version: '3'
services:

  mongo1:
    image: mongo:latest
    container_name: mongo1
    # Warning: We don't keep logs to make development simpler
    command: ["--replSet", "my-replica-set", "--bind_ip_all", "--port", "27017", "--quiet", "--logpath", "/dev/null"]  
    volumes:
      - ./data/chronicle/mongo-1:/data/db
    ports:
      - 27017:27017
    healthcheck:
      test: test $$(echo "rs.initiate({_id:'my-replica-set',members:[{_id:0,host:\"mongo1:27017\"},{_id:1,host:\"mongo2:27019\"},{_id:2,host:\"mongo3:27020\"}]}).ok || rs.status().ok" | mongo --port 27017 --quiet) -eq 1
      interval: 10s
      start_period: 5s

  mongo2:
    image: mongo:latest
    container_name: mongo2
    # Warning: We don't keep logs to make development simpler
    command: ["--replSet", "my-replica-set", "--bind_ip_all", "--port", "27019", "--quiet", "--logpath", "/dev/null"]
    volumes:
      - ./data/chronicle/mongo-2:/data/db
    ports:
      - 27019:27019

  mongo3:
    image: mongo:latest
    container_name: mongo3
    # Warning: We don't keep logs to make development simpler
    command: ["--replSet", "my-replica-set", "--bind_ip_all", "--port", "27020", "--quiet", "--logpath", "/dev/null"]
    volumes:
      - ./data/chronicle/mongo-3:/data/db
    ports:
      - 27020:27020


  inx-chronicle:
    container_name: inx-chronicle
    depends_on: [mongo1, mongo2, mongo3, hornet]
    build:
      context: ..
      dockerfile: docker/Dockerfile.debug
    image: inx-chronicle:dev
    ports:
      - "8042:8042/tcp"   # REST API
      - "9100:9100/tcp"   # Metrics
    environment:
      - RUST_LOG=warn,inx_chronicle=debug
    tty: true
    command:
      - "--inx"
      - "http://hornet:9029"
      - "--db"
      - "mongodb://mongo1:27017"
      - "--config"
      - "config.toml"
    volumes:
      - ../bin/inx-chronicle/config.template.toml:/app/config.toml:ro

  hornet:
    image: iotaledger/hornet:2.0.0-beta.6
    container_name: hornet
    ulimits:
      nofile:
        soft: 8192
        hard: 8192
    stop_grace_period: 5m
    ports:
      - "15600:15600/tcp" # Gossip
      - "14626:14626/udp" # Autopeering
      - "14265:14265/tcp" # REST API
      - "8081:8081/tcp"   # Dashboard
      - "8091:8091/tcp"   # Faucet
      - "9311:9311/tcp"   # Prometheus
      - "9029:9029/tcp"   # INX
    cap_drop:
      - ALL
    volumes:
      - ./data/hornet:/app/alphanet
      - ./config.alphanet.hornet.json:/app/config.json:ro
    command:
      - "-c"
      - "config.json"
      - "--inx.enabled=true"
      - "--inx.bindAddress=hornet:9029"

################################################################################
# The following services can be enabled by setting the `metrics` profile.

  prometheus:
    image: prom/prometheus:latest
    profiles:
      - metrics
    container_name: prometheus
    restart: unless-stopped
    user: "65532"
    ports:
      - '9090:9090'
    volumes:
      - ./data/prometheus/:/prometheus
      - ./assets/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - /etc/localtime:/etc/localtime:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.external-url=http://localhost:9090'

  mongodb-exporter:
    image: percona/mongodb_exporter:0.34
    profiles:
      - metrics
    depends_on:
      - mongo1
    container_name: mongodb-exporter
    restart: unless-stopped
    user: "65532"
    ports:
      - '9216:9261'
    command:
      - '--mongodb.uri=mongodb://mongo1:27017'
      - '--mongodb.direct-connect=true'
      - '--web.listen-address=:9216'
      - '--log.level=info'
      - '--discovering-mode'

  grafana:
    image: grafana/grafana:latest
    profiles:
      - metrics
    container_name: grafana
    restart: unless-stopped
    user: "65532"
    ports:
      - '3000:3000'
    volumes:
      - ./data/grafana:/var/lib/grafana
      - ./assets/grafana/:/etc/grafana/provisioning/
    environment:
      - GF_INSTALL_PLUGINS=yesoreyeram-infinity-datasource


